{"version":3,"file":"static/js/656.415f000d.chunk.js","mappings":"4PAEaA,EAAeC,EAAAA,GAAAA,OAAH,oJCAnBC,EAAOD,EAAAA,GAAAA,GAAH,oG,GAMGA,EAAAA,GAAAA,GAAH,4D,SCRGE,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAInBC,EAAgB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,OAAnB,E,SCGrBC,EAAc,WACzB,IAAMJ,GAAWK,EAAAA,EAAAA,IAAYP,GACvBQ,GAAWC,EAAAA,EAAAA,MAEjBC,QAAQC,IAAIT,GAEZ,IAAMU,EAAsB,SAAAC,GAC1BL,GAASM,EAAAA,EAAAA,IAAcD,EAAEE,cAAcC,KACvC,IAAMC,EAAKJ,EAAEE,cAAcC,GAC3BN,QAAQC,IAAIM,GACZ,IAAMC,EAAOhB,EAASiB,MAAK,SAAAC,GACzB,OAAOA,EAAQJ,KAAOC,CACvB,IACDP,QAAQC,IAAIO,EACb,EAED,OACE,8BACGhB,EAASmB,OAAS,EACjBnB,EAASoB,KAAI,YAA2B,IAAxBN,EAAuB,EAAvBA,GAAIO,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACxB,OACE,UAACzB,EAAD,WACGwB,EADH,KACWC,EAAQ,KACjB,SAAC3B,EAAD,CAAcmB,GAAIA,EAAIS,QAASb,EAA/B,UACE,SAAC,MAAD,QAHOI,EAOd,KAED,wCAIP,E,UCtCKU,GAAc5B,EAAAA,EAAAA,IAAO6B,EAAAA,GAAP7B,CAAH,8GAMX8B,EAAS9B,EAAAA,GAAAA,OAAH,0JASN+B,EAAQ/B,EAAAA,GAAAA,MAAH,+CAGLgC,GAAQhC,EAAAA,EAAAA,IAAOiC,EAAAA,GAAPjC,CAAH,gDChBEkC,EAAY,WACvB,IAAMxB,GAAWC,EAAAA,EAAAA,MAEXwB,GAAgB1B,EAAAA,EAAAA,KAAY,SAAAN,GAAK,OAAIA,EAAMC,SAASC,KAAnB,IAA0BmB,KAC/D,SAAAF,GAAO,OAAIA,EAAQG,IAAZ,IAgBT,OACE,+BACE,SAAC,KAAD,CAAQW,cANU,CACpBX,KAAM,GACNC,OAAQ,IAIgCW,SAfrB,SAACC,EAAQC,GACxBJ,EAAcK,SAASF,EAAOb,MAChCgB,MAAM,8CAEN/B,GAASgC,EAAAA,EAAAA,IAAWJ,IAEtBC,EAAQI,WACT,EAQG,UACE,UAACf,EAAD,CAAagB,aAAa,MAA1B,WACE,SAACb,EAAD,CAAOc,QAAQ,OAAf,mBACA,SAACb,EAAD,CACEc,KAAK,OACLrB,KAAK,OACLsB,YAAY,iBACZC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAEV,SAACnB,EAAD,CAAOc,QAAQ,SAAf,qBACA,SAACb,EAAD,CACEc,KAAK,MACLrB,KAAK,SACLsB,YAAY,YACZC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAGV,SAACpB,EAAD,CAAQgB,KAAK,SAAb,+BAKT,EC9Cc,SAASK,IACtB,IAAMzC,GAAWC,EAAAA,EAAAA,MACXyC,GAAY3C,EAAAA,EAAAA,IAAYH,GAM9B,OAJA+C,EAAAA,EAAAA,YAAU,WACR3C,GAAS4C,EAAAA,EAAAA,MACV,GAAE,CAAC5C,KAGF,iCACE,SAACwB,EAAD,KACA,yBAAMkB,GAAa,4BACnB,SAAC5C,EAAD,MAGL,C","sources":["components/ContactsList/contactItemStyles.js","components/Contacts/contactsStyles.js","redux/contacts/selectors.js","components/ContactsList/ContactItem.jsx","components/Phonebook/phonebookStyles.js","components/Phonebook/Phonebook.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const DeleteButton = styled.button`\n  border: none;\n  border-radius: 4px;\n  background-color: transparent;\n  &:hover {\n    background-color: #8787e8;\n  }\n`;\n","import styled from 'styled-components';\n\nconst Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`;\n\nconst List = styled.ul`\n  margin-bottom: 0;\n  padding: 0;\n`;\n\nexport { List, Item };\n","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter;\nexport const selectLoading = state => state.contacts.loading;\nexport const selectFilter = state => state.contacts.filter;\nexport const selectAllContacts = state => state.contacts.items;\n","import { ImBin } from 'react-icons/im';\nimport { DeleteButton } from './contactItemStyles';\nimport { Item } from '../Contacts/contactsStyles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\n\nexport const ContactItem = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  console.log(contacts);\n\n  const handleRemoveContact = e => {\n    dispatch(deleteContact(e.currentTarget.id));\n    const ID = e.currentTarget.id;\n    console.log(ID);\n    const CONT = contacts.find(contact => {\n      return contact.id === ID;\n    });\n    console.log(CONT);\n  };\n\n  return (\n    <>\n      {contacts.length > 0 ? (\n        contacts.map(({ id, name, number }) => {\n          return (\n            <Item key={id}>\n              {name}: {number}{' '}\n              <DeleteButton id={id} onClick={handleRemoveContact}>\n                <ImBin />\n              </DeleteButton>\n            </Item>\n          );\n        })\n      ) : (\n        <p>No contacts</p>\n      )}\n    </>\n  );\n};\n","import { Form, Field } from 'formik';\nimport styled from 'styled-components';\n\nconst AddUserForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 8px;\n`;\nconst Button = styled.button`\n  width: fit-content;\n  border-radius: 4px;\n  padding: 4px;\n  border: none;\n  &:hover {\n    background-color: #8787e8;\n  }\n`;\nconst Label = styled.label`\n  margin-bottom: 8px;\n`;\nconst Input = styled(Field)`\n  margin-bottom: 20px;\n`;\n\nexport { AddUserForm, Button, Label, Input };\n","import { Formik } from 'formik';\nimport { AddUserForm, Button, Label, Input } from './phonebookStyles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\n\nexport const Phonebook = () => {\n  const dispatch = useDispatch();\n\n  const existingNames = useSelector(state => state.contacts.items).map(\n    contact => contact.name,\n  );\n\n  const handleSubmit = (values, actions) => {\n    if (existingNames.includes(values.name)) {\n      alert('Contact whith the same name already exist!');\n    } else {\n      dispatch(addContact(values));\n    }\n    actions.resetForm();\n  };\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n  return (\n    <>\n      <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n        <AddUserForm autoComplete=\"off\">\n          <Label htmlFor=\"name\">Name</Label>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Evhen Melnicuk\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <Label htmlFor=\"number\">Number</Label>\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"777-21-09\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n\n          <Button type=\"submit\">Add contact</Button>\n        </AddUserForm>\n      </Formik>\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactItem } from 'components/ContactsList/ContactItem';\nimport { Phonebook } from 'components/Phonebook/Phonebook';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Phonebook />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactItem />\n    </>\n  );\n}\n"],"names":["DeleteButton","styled","Item","getContacts","state","contacts","items","selectLoading","loading","ContactItem","useSelector","dispatch","useDispatch","console","log","handleRemoveContact","e","deleteContact","currentTarget","id","ID","CONT","find","contact","length","map","name","number","onClick","AddUserForm","Form","Button","Label","Input","Field","Phonebook","existingNames","initialValues","onSubmit","values","actions","includes","alert","addContact","resetForm","autoComplete","htmlFor","type","placeholder","pattern","title","required","Tasks","isLoading","useEffect","fetchContacts"],"sourceRoot":""}