{"version":3,"file":"static/js/36.5dc6f953.chunk.js","mappings":"oPAEaA,EAAeC,EAAAA,GAAAA,OAAH,0KCAnBC,EAAOD,EAAAA,GAAAA,GAAH,gSAiBJE,EAAOF,EAAAA,GAAAA,GAAH,kF,UCnBGG,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAInBC,EAAgB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,OAAnB,E,SCErBC,EAAc,WACzB,IAAMJ,GAAWK,EAAAA,EAAAA,IAAYP,GACvBQ,GAAWC,EAAAA,EAAAA,MAEXC,EAAsB,SAAAC,GAC1BH,GAASI,EAAAA,EAAAA,IAAcD,EAAEE,cAAcC,IACxC,EAED,OACE,8BACGZ,EAASa,OAAS,EACjBb,EAASc,KAAI,YAA2B,IAAxBF,EAAuB,EAAvBA,GAAIG,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACxB,OACE,UAACpB,EAAD,YACE,2BACGmB,EADH,KACWC,EAAQ,QAEnB,SAACtB,EAAD,CAAckB,GAAIA,EAAIK,QAAST,EAA/B,sBAJSI,EASd,KAED,wCAIP,EC9BYM,EAAW,WACtB,OACE,SAACrB,EAAD,WACE,SAACO,EAAD,KAGL,E,UCPKe,GAAcxB,EAAAA,EAAAA,IAAOyB,EAAAA,GAAPzB,CAAH,sIAOX0B,EAAS1B,EAAAA,GAAAA,OAAH,0JASN2B,EAAQ3B,EAAAA,GAAAA,MAAH,mHAML4B,GAAQ5B,EAAAA,EAAAA,IAAO6B,EAAAA,GAAP7B,CAAH,gDCpBE8B,EAAY,WACvB,IAAMnB,GAAWC,EAAAA,EAAAA,MAEXmB,GAAgBrB,EAAAA,EAAAA,KAAY,SAAAN,GAAK,OAAIA,EAAMC,SAASC,KAAnB,IAA0Ba,KAC/D,SAAAa,GAAO,OAAIA,EAAQZ,IAAZ,IAgBT,OACE,+BACE,SAAC,KAAD,CAAQa,cANU,CACpBb,KAAM,GACNC,OAAQ,IAIgCa,SAfrB,SAACC,EAAQC,GACxBL,EAAcM,SAASF,EAAOf,MAChCkB,MAAM,8CAEN3B,GAAS4B,EAAAA,EAAAA,IAAWJ,IAEtBC,EAAQI,WACT,EAQG,UACE,UAAChB,EAAD,CAAaiB,aAAa,MAA1B,WACE,UAACd,EAAD,CAAOe,QAAQ,OAAf,WACE,wCACA,SAACd,EAAD,CACEe,KAAK,OACLvB,KAAK,OACLwB,YAAY,iBACZC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAIZ,UAACpB,EAAD,CAAOe,QAAQ,SAAf,WACE,0CACA,SAACd,EAAD,CACEe,KAAK,MACLvB,KAAK,SACLwB,YAAY,YACZC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAIZ,SAACrB,EAAD,CAAQiB,KAAK,SAAb,+BAKT,ECxDYK,EAAQhD,EAAAA,GAAAA,IAAH,yCCMH,SAASiD,IACtB,IAAMtC,GAAWC,EAAAA,EAAAA,MACXsC,GAAYxC,EAAAA,EAAAA,IAAYH,GAM9B,OAJA4C,EAAAA,EAAAA,YAAU,WACRxC,GAASyC,EAAAA,EAAAA,MACV,GAAE,CAACzC,KAGF,UAACqC,EAAD,YACE,SAAClB,EAAD,KACA,yBAAMoB,GAAa,4BACnB,SAAC3B,EAAD,MAGL,C","sources":["components/ContactsList/contactItemStyles.js","components/Contacts/contactsStyles.js","redux/contacts/selectors.js","components/ContactsList/ContactItem.jsx","components/Contacts/Contacts.jsx","components/Phonebook/phonebookStyles.js","components/Phonebook/Phonebook.jsx","styles/contactsPageStyles.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const DeleteButton = styled.button`\n  border: none;\n  border-radius: 4px;\n  background-color: transparent;\n  color: white;\n  cursor: pointer;\n  &:hover {\n    scale: 1.1;\n  }\n`;\n","import styled from 'styled-components';\n\nconst Item = styled.li`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 8px;\n  padding: 4px;\n  &:hover {\n    color: #000000;\n    background-color: rgb(239, 239, 239);\n    border-radius: 5px;\n\n    & button {\n      color: #e84a5f;\n    }\n  }\n`;\n\nconst List = styled.ul`\n  text-align: center;\n  padding: 0;\n  max-width: 100%;\n`;\n\nexport { List, Item };\n","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter;\nexport const selectLoading = state => state.contacts.loading;\nexport const selectFilter = state => state.contacts.filter;\nexport const selectAllContacts = state => state.contacts.items;\n","import { DeleteButton } from './contactItemStyles';\nimport { Item } from '../Contacts/contactsStyles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { getContacts } from '../../redux/contacts/selectors';\n\nexport const ContactItem = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleRemoveContact = e => {\n    dispatch(deleteContact(e.currentTarget.id));\n  };\n\n  return (\n    <>\n      {contacts.length > 0 ? (\n        contacts.map(({ id, name, number }) => {\n          return (\n            <Item key={id}>\n              <div>\n                {name}: {number}{' '}\n              </div>\n              <DeleteButton id={id} onClick={handleRemoveContact}>\n                Delete\n              </DeleteButton>\n            </Item>\n          );\n        })\n      ) : (\n        <p>No contacts</p>\n      )}\n    </>\n  );\n};\n","import { ContactItem } from '../ContactsList/ContactItem';\nimport { List } from './contactsStyles';\nimport PropTypes from 'prop-types';\n\nexport const Contacts = () => {\n  return (\n    <List>\n      <ContactItem />\n    </List>\n  );\n};\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n  onClick: PropTypes.func,\n};\n","import { Form, Field } from 'formik';\nimport styled from 'styled-components';\n\nconst AddUserForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 8px;\n  margin-bottom: 20px;\n`;\nconst Button = styled.button`\n  width: fit-content;\n  border-radius: 4px;\n  padding: 4px;\n  border: none;\n  &:hover {\n    background-color: #e84a5f;\n  }\n`;\nconst Label = styled.label`\n  width: 60%;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`;\nconst Input = styled(Field)`\n  margin-bottom: 10px;\n`;\n\nexport { AddUserForm, Button, Label, Input };\n","import { Formik } from 'formik';\nimport { AddUserForm, Button, Label, Input } from './phonebookStyles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\n\nexport const Phonebook = () => {\n  const dispatch = useDispatch();\n\n  const existingNames = useSelector(state => state.contacts.items).map(\n    contact => contact.name,\n  );\n\n  const handleSubmit = (values, actions) => {\n    if (existingNames.includes(values.name)) {\n      alert('Contact whith the same name already exist!');\n    } else {\n      dispatch(addContact(values));\n    }\n    actions.resetForm();\n  };\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n  return (\n    <>\n      <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n        <AddUserForm autoComplete=\"off\">\n          <Label htmlFor=\"name\">\n            <>Name</>\n            <Input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Evhen Melnicuk\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </Label>\n\n          <Label htmlFor=\"number\">\n            <>Number</>\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"777-21-09\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </Label>\n\n          <Button type=\"submit\">Add contact</Button>\n        </AddUserForm>\n      </Formik>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Thumb = styled.div`\n  width: 400px;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport { Phonebook } from 'components/Phonebook/Phonebook';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { Thumb } from 'styles/contactsPageStyles';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Thumb>\n      <Phonebook />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Contacts />\n    </Thumb>\n  );\n}\n"],"names":["DeleteButton","styled","Item","List","getContacts","state","contacts","items","selectLoading","loading","ContactItem","useSelector","dispatch","useDispatch","handleRemoveContact","e","deleteContact","currentTarget","id","length","map","name","number","onClick","Contacts","AddUserForm","Form","Button","Label","Input","Field","Phonebook","existingNames","contact","initialValues","onSubmit","values","actions","includes","alert","addContact","resetForm","autoComplete","htmlFor","type","placeholder","pattern","title","required","Thumb","Tasks","isLoading","useEffect","fetchContacts"],"sourceRoot":""}